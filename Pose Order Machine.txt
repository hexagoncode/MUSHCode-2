
/* 

Pose Order Machine by skew

(Note: this is written for people, like me, who barely understand what they're doing.)

This code uses the TinyMUX hook object. If you have +posebreak on your game, you probably already have this functioning. 
You will also need Myrddin's mushcron to clear out the idlers.

The basic functionality goes:
	* When a player poses (using 'pose' or '@em' or '"' or '\' whatever) the POM writes an attribute to the player's room.
	* After every pose, the code wipes the players previous pose attribute and writes a new one.
	* The code reads the room and creates a list of poses, then puts it in order. The oldest pose is whoever is now "up".
	* The code checks the player's attributes to see if they have poseorder on/off, then alerts the player as appropriate.
	* Every minute, mushcron checks all rooms. If the player is not there (left room, disconnected), they are wiped off the 
  pose order. If the player's last pose is older than X (default: 45 ) minutes, they are wiped off the pose order.
	* Additional functionality is here to exclude rooms, either from a global list (poseorder/exclude) or on a per-room basis 
  (poseorder/here off). The latter allows players to configure rooms they own.
	* Players can always use +poseorder to check the current poseorder.
	
Wish List:

* Find a way to not ping the first poser in a big scene.
	(Maybe: If more than 5 people, wait for 3 poses to accrue?)
* poseorder/fixed X -- Alert you every x poses, regardless of whose turn.
* poseorder/ondeck -- Alert you when your turn is up next.

PLEASE NOTE: This is designed to be dropped into Muxify ( http://muxify.musoapbox.net/editor.html ).
Muxify will not work on Chrome or Edge (for me, at least), so please use FireFox.

=============================
== Setup ====================

Note: This assumes you have @hook object <ho> and CRON - Myrddin's mushcron. If these are named something different, you 
will need to adjust, or set them manually.

This first part creates attributes on you, and on your objects, so they have the dbref of other things stored. This way 
you can keep tinkering even if the object isn't in the room with you.

*/


@create Pose Order Machine <pom>
@set Pose Order Machine <pom>=inherit safe
@fo me=&d.pom me=search( name=Pose Order Machine <pom> )
@fo me=&d.ho me=search( name=@hook object <ho> )

@@ Move object to master room. Don't use this if it shouldn't go there...

@tel [v( d.pom )]=[config(master_room)]

@fo me=&d.ho [v( d.pom )]=search( name=@hook object <ho> )
@fo me=&d.pom [v( d.ho )]=v( d.pom )

@set [v( d.pom )]=!halt

@desc [v( d.pom )]=[header( Pose Order Machine <POM> )] 
	%r%rPlease use +poseorder/help for help! 
	%r%rThis thing was made by skew. %r%r[footer( +poseorder )]

@@ This formats messages with an ansi highlight so you don't have to define that constantly.
@@ To use it, it's like u( .msg, Title, Message ) and it outputs "<Title> Message"

&.msg [v( d.pom )]=ansi( h, <%0>, n, %b%1 )

@@ Every min sweeps players who have not posed in (d.pose.time) seconds. Default here is 2700 = 45 minutes
			
&d.pose.time [v( d.pom )]=2700

&d.exclude.rooms [v( d.pom )]=@@( Adding this here so you know it's here. Code will set it when needed. )

&d.exclude.zones [v( d.pom )]=@@( Adding this here so you know it's here. Code will set it when needed. )

@@ Configure the hook object to send to the pom object.

@@ First, delete old enteries. If you've not installed POM before, this does nothing.

@edit [v( d.ho )]/B_POSE = [u( [v( d.pom )]/f.poseorder )],
@edit [v( d.ho )]/B_POSE/NOSPACE = [u( [v( d.pom )]/f.poseorder )],
@edit [v( d.ho )]/B_NPOSE = [u( [v( d.pom )]/f.poseorder )],
@edit [v( d.ho )]/B_SAY = [u( [v( d.pom )]/f.poseorder )],
@edit [v( d.ho )]/B_NSAY = [u( [v( d.pom )]/f.poseorder )],
@edit [v( d.ho )]/B_@EMIT = [u( [v( d.pom )]/f.poseorder )],

@@ Second, add entries we need. This now contains 'who posed', which is used
@@ in a later part of the code.

@edit [v( d.ho )]/B_POSE = $, [u( [v( d.pom )]/f.poseorder, %# )]
@edit [v( d.ho )]/B_POSE/NOSPACE = $, [u( [v( d.pom )]/f.poseorder, %# )]
@edit [v( d.ho )]/B_NPOSE = $, [u( [v( d.pom )]/f.poseorder, %# )]
@edit [v( d.ho )]/B_SAY = $, [u( [v( d.pom )]/f.poseorder, %# )]
@edit [v( d.ho )]/B_NSAY = $, [u( [v( d.pom )]/f.poseorder, %# )]
@edit [v( d.ho )]/B_@EMIT = $, [u( [v( d.pom )]/f.poseorder, %# )]

@@ This is the CRON stuff. It is looking for 'CRON' for the name of the object.
@@ Please make sure there's something to find. If not, manually set &d.cron me=#dbref

@fo me=&d.cron me=search( name=Cron )

@fo me=&jobs_1minute [v( d.cron )]=[ strcat( get( [v( d.cron )]/jobs_1minute ), %b, [v( d.pom )]/trig.sweep.rooms )]

&cron_time_1minute [v( d.cron )]=||||00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 
  21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59|

&cron_job_1minute [v( d.cron )]=@dol [v( jobs_1minute )]=@trigger ##

/*

=============================
== Backend stuff ============

*/

@@ Need to consider flagging for OOC zone.
@@ Variables: 0: The target to process as having posed.
@@ Previously, this assumed the poser would always be the 'target'. Now we are
@@ Adding pose skipping, so %0 might not always be the enactor. Might be someone else.

&f.poseorder [v( d.pom )]=
	strcat(
		setq( l, loc( %0 ) ), @@( get location ),
		if( cor( 
				match( u( d.exclude.zones ), zone( %ql ) ), @@( check exclude zones),
				match( u( d.exclude.rooms ), %ql ), @@( check exclude room list),
				match( get( %ql/_POSE.ORDER ), off ), @@( check setting on local room )
			), @@( If on the no list do nothing ),
			strcat( 
				iter( 
					lattr( %ql/d.pose.* ), 
					if( 
						match( last( get( %ql/## ), . ), %0 ), 
						wipe( %ql/## ) , 
//						pemit( %#, %xhxr I think I should be wiping %ql/## ),
						@@( do nothing )
					) 
				), @@( clear your previous poses ),
				set( %ql, 
					u( f.format.pose.attribute, %0 ):
					[u( f.format.pose.data, %0 )] ), @@( add that you posed ),
				trigger( me/trig.pose.alert, %ql ), @@( alert next up )
			)
		)
	)


@@ Each time you pose add attrib. Should looks like:
@@ d.pose.34 : 12098570983.#15
@@ d.pose.next available number : time.who posed
		
@@ We're adding 1000 so the attribute will be 1001+, that makes it easier
@@ To sort (because otherwise d.pose.1 d.pose.2 d.pose.10 ... it'll go 1 10 2		
&f.format.pose.attribute [v( d.pom )]=
	strcat( d., pose., inc( add( u( f.get.last ), 1000 ) ) )

@@ Check all attributes for the #s, grab the last (highest)	
&f.get.last [v( d.pom )]=
	last( 
		sort( 
			iter( 
				lattr( %ql/d.pose.* ), 
				last( ##, . )
			, , %b )
		, n )
	)
	
&f.format.pose.data 	[v( d.pom )]=
	strcat( secs()., %0	)

@@ Put the list of poses in order. Output should be Seconds:#DBref Seconds:#DBref

&f.order.poses [v( d.pom )]=
	strcat(
		setq( o, sort( lattr( %0/d.pose.* ) ) ),
		iter( %qo, get( %0/## ) ),
		@@( List of who posed is stored on room object )
	)	
	
&trig.sweep.rooms [v( d.pom )]=
	@dol search( eroom=lattr( ##/d.pose.* ))=
		@trig me/trig.sweep.idle=##
	
@@ Sweep will be triggered via CRON on a one minute. If not in room, if disconnected, or if exceed time
@@ You get swept!
	
&trig.sweep.idle [v( d.pom )]=
	@dol lattr( %0/d.pose.* )=
		th strcat(
			setq( 1, get( %0/## ) ),
			setq( t, first( %q1, . ) ),
			setq( p, rest( %q1, . ) ),
			if( 
				cor(
					not( match( lcon( %0, connect ), %qp ) ),
					gte( sub( secs(), %qt ), u( d.pose.time ) ),
					@@( if not connected or if idle wipe )
				),
				wipe( %0/## )
			)
		)
	

@@ write something so that if you leave the room it doesn't ping you!	
	
&trig.pose.alert [v( d.pom )]=
	th strcat(
		setq( o, u( f.order.poses, %0 ) ), 
		@@( Grabs the list as time:#dbref space time:#dbref space etc),
		setq( w, words( %qo ) ), 
		@@( If there is only 1 person on the list, don't alert ),
		setq( u, rest( first( %qo ), . ) ), 
		@@( list is from oldest to newest, oldest is now 'up' ),
		setq( m, 
			case( get( %qu/_POSE.ALERT ),
				quiet, 1,
				loud, 2,
				0 
			)
		), 
		@@( Players can have alerts quiet, loud, or off )
	);
	@if [cor( 
			not( %qm ), 
			eq( %qw, 1 ), 
			not( match( loc( %qu ), %0 ) )
		)] =
		@@( Do Nothing, either only 1 person or alerts are off ),
		@pemit %qu={
			[u( .msg, Pose Order, It is your turn to pose.)]
			[if( eq( %qm, 2 ), 
				strcat( %b, 
					beep(), 
					Beep!, 
					@@( beep sends the sounds to the client ) 
				) 
			)]
			};

		
&display.pose.order [v( d.pom )]=
	strcat( @@( This pulls the list of posers and displays it. Nbd.),
		setq( o, u( f.order.poses, %0 ) ),
		setq( u, rest( first( %qo ), .) ), %r,
		case( 1, 
			match( get( %0/_POSE.ORDER ), off ), strcat(
				ljust( ,10), ljust( Pose Order tracking is currently [ansi( hr, OFF )]., 40 ), %r,
				ljust( ,10), ljust( Staff or the room owner can turn it on., 40), %r%r ),
			cor( t( match( u( d.exclude.zones ), zone( %0 ) ) ),
				t( match( u( d.exclude.rooms ), %0 ) ) ), 
			strcat(
				ljust( ,10), ljust( This room is [ansi( hr, excluded )] from pose tracking., 40 ), %r,
				ljust( ,10), ljust( If it should be on%, please contact staff., 40), %r%r ),
			not( %qo ), strcat(
				ljust( ,10), ljust( No one has posed yet., 40 ), %r%r ),
			strcat(	a
				ljust( ,10), ljust( It is [ansi(hy, name(%qu)'s)] turn to pose., 30), %r%r,
				ljust( ,10), ljust( %xhName%xn, 20), ljust( %xhLast%xn, 10), ljust( %xhIdle%xn, 10), %r,
				iter( %qo, strcat(
					setq( t, first( ##, . ) ),
					setq( p, rest( ##, . ) ),
					ljust( ,10),
					ljust( name( %qp ), 20),
					ljust( singletime( sub( secs(), %qt ) ), 10),
					setq( i, if( hasflag( %qp, connected),
							idle( %qp ),
							sub( secs(), connleft( %qp ) )
						) ),
					ljust( singletime( %qi ), 10)
					), , %r),%r%r
				)
			),
		if( get( %1/_POSE.ALERT ), strcat( 
			ljust( ,10), Your alert is currently set to, %b,
			ucstr( get( %1/_POSE.ALERT ) ), ., %r%r ),
			strcat( 
				ljust( ,10 ), You do not have a pose alert set. See +poseorder/help. %r%r ))
	)

/*

=============================
== Commands ============

+poseorder : display the current pose order
+poseorder <option> : Turn on/off, see below.

Options:

* <null> : display the current pose order
* <quiet/loud/off> : Turn it on/off, set it loud/quiet.
* /clear : Clears the current pose order. Do we need this? Could be used when starting a 'new' scene
* /here <on/off> : Staff or room owner can turn off poseorder for the room.
* /exclude <here/dbref/!dbref> : Update the noposeorder object for rooms that should be excluded.
* /skip <name> : Marks a person as having posed.
* /remove <name> : Removes them from +poseorder

*/

@@ Mistress command. Captures +poseorder(anything else).

&c.poseorder [v( d.pom )]=$^\+?poseorder([\s\S]+)?$:@pemit %#=
	[setq( 0, secure( %1 ))]
	[switch( %q0, 
		, u( c.display.pose.order, loc( %# ), %# ),
		%b*, u( c.poseorder.switch.me, trim( %q0 ), %# ),
		/help, u( disp.help ),
		/clear, u( c.poseorder.clear.here, loc( %# ), %# ),
		/here *, u( c.poseorder.switch.here, trim(rest( %q0 )), loc( %# ), %# ),
		/exclude *, u( c.poseorder.exclude, trim(rest( %q0 )), loc( %# ), %# ),
		/skip *, u( c.poseorder.skip, trim(rest( %q0 )), loc( %# ), %# ),
		/remove *, u( c.poseorder.remove, trim(rest( %q0 )), loc( %# ), %# ),
		u( .msg, Pose Order, Please see +poseorder/help. )
	)]
	
@set [v( d.pom )]/c.poseorder=regex
		
&c.display.pose.order [v( d.pom )]=
	strcat(
		header(Whose turn is it? <POM>), %r,
		u( display.pose.order, %0, %1 ),
		footer(+poseorder), @@( Displays who is up and pose order )
	)


&c.poseorder.switch.me [v( d.pom )]=
	strcat(
		setq( a, case( %0,
			on, loud,
			quiet, quiet,
			loud, loud,
			off, off,
			error )),
		if( match( %qa, error ), u( .msg, Pose Order, Error: Please choose 'on' 'quiet' 'loud' or 'off' ),
			strcat( 
				set( %1, _POSE.ALERT:%qa ),
				u( .msg, Pose Order, Alert set to [capstr(%qa)] ),
				@@( Pretty straight forward. loud = beep, quiet = no beep, off = nothing )
			) )
		)

&c.poseorder.clear.here [v( d.pom )]=
	strcat(
		setq( l, %0 ), @@( get location ),
		wipe( %ql/d.pose.* ), @@( clear all previous poses ),
		remit( %ql, u( .msg, Pose Order, [name( %1 )] has cleared the pose order. ) )
	)
		

&c.poseorder.switch.here [v( d.pom )]=
	strcat(
		setq( a, case( %0,
			on, on,
			off, off,
			error )),
		if( cor( match( %2, owner( %1 )), isstaff( %2 ) ), 
			@@( If you are staff or owner leave variable as is else change it to trigger error msg ),
			setq( a, error2 )),
		case( %qa,
			error, u( .msg, Pose Order, Error: Please choose 'on' or 'off' ),
			error2, u( .msg, Pose Order, Error: You may only change this setting for rooms you own. ),
			strcat( 
				set( %1, _POSE.ORDER:%qa ),
				remit( %1, [u( .msg, Pose Order, Pose order tracking for this room is now [ucstr( %qa )]. )] ),
				@@( Can only accept on or off. Must be staff or room owner. remit sends a message to whole room. )
			) 
		)
	)


&c.poseorder.exclude [v( d.pom )]=
	strcat(
		setq( a, if( match( %0, here), %1, %0) ), @@( If here grab that loc else process the dbref ),
		setq( d, u( d.exclude.rooms ) ),
		case( 1,
			not( isstaff( %2 )), u( .msg, Pose Order, Only staff may exclude rooms. If you wish to exclude a room you own%, try: +poseorder/here off ),
			match( %qa, list), strcat(
				@@( Display what rooms are currently excluded. ),
				header( Excluded Rooms ),%r%r,
				center( If this is empty%, it means there are none., 78 ), %r,
				center( Please note%, this does not find rooms set with '/here off'., 78 ), %r%r,
				iter( %qd, center( strcat( name( ## ), %b, <##>), 78 ), ,%r ), %r%r,
				footer( +poseorder/exclude list )
				),
			match( %qa, !* ), strcat(
				setq( r, edit( %qa, !, ) ),
				if( match( %qd, %qr),
					strcat(
						set( %!, d.exclude.rooms:[remove( %qd, %qr)]),
						u( .msg, Pose Order, Removing [name( %qr )] <%qr> from exclude rooms list. ),
						@@( if you have a ! in it, removes. If you do !#303 #304 should remove both I guess )),
					u( .msg, Pose Order, No such dbref found on the exclude rooms list. ) )
				),
			hastype( %qa, room ), 
				if( match( %qd, %qa ),
					u( .msg, Pose Order, [name( %qa )] <%qa> is already on exclude rooms list. ),
					strcat(
						set( %!, d.exclude.rooms:[edit( %qd, $, %b%qa )] ),
						u( .msg, Pose Order, Adding [name( %qa )] <%qa> to exclude rooms list. ),
						@@( $ keeps the existing list, adds in a space + the room) )
				),
			u( .msg, Pose Order, You have not entered a valid room #dbref. )
		)
	)
	
@@ Check if target is a player, check if they're on the list, process a pose	
@@ u( c.poseorder.skip, trim(rest( %q0 )), loc( %# ), %# )

	
&c.poseorder.skip [v( d.pom )]=
	strcat(
		setq( p, pmatch( %0 ) ),
		switch( 0,
			t( pmatch( %qp ) ), 
			u( .msg, Pose Order, %0 is not a valid player. ),
			strmatch( u( f.order.poses, %1 ), *%qp* ),
			u( .msg, Pose Order, [name(%qp)] has not posed in this room. ),
			strcat( 
				u( f.poseorder, %qp ),
				remit( %1, u( .msg, Pose Order, [name(%2)] has skipped [name(%qp)]. )),
				u( .msg, Pose Order, You have skipped [name(%qp)]. )
			)
		)
	)

@@ Remove a person from poseorder. This will actually process that they posed
@@ and then remove them, so it properly alerts the next person.

&c.poseorder.remove [v( d.pom )]=
	strcat(
		setq( p, pmatch( %0 ) ),
		switch( 0,
			t( pmatch( %qp ) ), 
			u( .msg, Pose Order, %0 is not a valid player. ),
			strmatch( u( f.order.poses, %1 ), *%qp* ),
			u( .msg, Pose Order, [name(%qp)] has not posed in this room. ),
			strcat(
				remit( %1, u( .msg, Pose Order, [ name( %2 ) ] has removed [name( %qp )]. )),
				u( .msg, Pose Order, You remove [ name( %qp ) ]. ),
				iter( 
					lattr( %1/d.pose.* ), 
					if( 
						match( last( get( %1/## ), . ), %qp ), 
						wipe( %1/## ) , 
//						pemit( %#, %xhxr I think I should be wiping %ql/## ),
						@@( do nothing )
					) 
				),
				trigger( %!/trig.pose.alert, %1 )
			)
		)
	)	

/*

=============================
== Help File ================

Including a "help" command because some people don't have easy ways to add new +help commands!

*/

&disp.help [v( d.pom )]=
	strcat(
		header(The Pose Order Machine <POM> Help File), %r%r,
		The pose order machine tracks poses and alert when it's your turn., %r%r,
		%xhCommands%xn, %r%r,
		* +poseorder : display the current pose order,%r,
		* +poseorder <quiet/loud/off> : Turn it on/off%, set it loud/quiet.,%r,
		* +poseorder/clear : Clears the current pose order.,%r,
		* +poseorder/here <on/off> : The Owner can turn off poseorder for the room.,%r,
		* +poseorder/exclude <here/dbref/!dbref/list> : Exclude room from pose order.,%r,
		* +poseorder/skip <name> : Skips a person.,%r,
		* +poseorder/remove <name> : Removes a person from the poseorder, %r,
		* +poseorder/help : This right here.,%r%r,
		This whole thingy was made by skew.,%r%r,
		footer(+poseorder/help), @@( Displays who is up and pose order )
	)


